// src/components/ReviewForm.jsx
import React, { useState } from 'react';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';

export default function ReviewForm({ productId, onAdded, initialReview, onCancelEdit }) {
  // N·∫øu c√≥ initialReview (ch·∫ø ƒë·ªô ch·ªânh s·ª≠a) th√¨ d√πng gi√° tr·ªã c≈©
  const [rating, setRating] = useState(initialReview?.rating || 5);
  const [comment, setComment] = useState(initialReview?.comment || '');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [images, setImages] = useState([]); // File list for new uploads
  // L∆∞u URL ·∫£nh c≈© ƒë·ªÉ hi·ªÉn th·ªã trong ch·∫ø ƒë·ªô ch·ªânh s·ª≠a (n·∫øu c√≥)
  const [existingImageUrls] = useState(initialReview?.images?.map(path => {
    if (path.startsWith("http")) return path;
    const BASE_URL = "http://localhost:4000";
    return `${BASE_URL}${path.startsWith("/") ? path : "/" + path}`;
  }) || []);
  const [previewUrls, setPreviewUrls] = useState([]); // URLs for new uploads

  const { isAuthenticated, user } = useAuth();
  
  // X√°c ƒë·ªãnh ch·∫ø ƒë·ªô: Ch·ªânh s·ª≠a (true) hay T·∫°o m·ªõi (false)
  const isEditMode = !!initialReview;

  // ======= X·ª≠ l√Ω ch·ªçn ·∫£nh =======
  function handleImageChange(e) {
    const files = Array.from(e.target.files);
    if (files.length + existingImageUrls.length > 5) {
      alert(`T·ªïng c·ªông t·ªëi ƒëa 5 ·∫£nh (ƒë√£ c√≥ ${existingImageUrls.length} ·∫£nh c≈©). B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn th√™m t·ªëi ƒëa ${5 - existingImageUrls.length} ·∫£nh.`);
      e.target.value = null; // X√≥a file ƒë√£ ch·ªçn
      return;
    }
    setImages(files);
    setPreviewUrls(files.map(f => URL.createObjectURL(f)));
  }

  // ======= G·ª≠i ƒë√°nh gi√° / Ch·ªânh s·ª≠a =======
async function submit() {
  // ... (ki·ªÉm tra auth v√† comment gi·ªØ nguy√™n)

  setIsSubmitting(true);
  try {
    const formData = new FormData();
    formData.append('rating', rating);
    formData.append('comment', comment);

    // Th√™m productId khi t·∫°o m·ªõi (Gi·ªØ nguy√™n)
    if (!isEditMode) {
      formData.append('productId', productId);
    }
    
    // üëá TH√äM: X·ª≠ l√Ω m·∫£ng ·∫£nh c≈© khi CH·ªàNH S·ª¨A (Quan tr·ªçng!)
    if (isEditMode) {
        // Backend (review.js) k·ª≥ v·ªçng tr∆∞·ªùng 'existingImages' d∆∞·ªõi d·∫°ng chu·ªói JSON
        // ch·ª©a c√°c ƒë∆∞·ªùng d·∫´n ·∫£nh c≈© mu·ªën gi·ªØ l·∫°i.
        // existingImageUrls l√† m·∫£ng c√°c URL ho√†n ch·ªânh, c·∫ßn chuy·ªÉn ƒë·ªïi v·ªÅ path t∆∞∆°ng ƒë·ªëi
        const BASE_URL = "http://localhost:4000";
        const relativePathsToKeep = existingImageUrls.map(url => 
            url.startsWith(BASE_URL) ? url.substring(BASE_URL.length) : url
        );
        formData.append('existingImages', JSON.stringify(relativePathsToKeep)); // G·ª≠i m·∫£ng ·∫£nh c≈© d∆∞·ªõi d·∫°ng JSON string
    }

    // Th√™m ·∫£nh m·ªõi (c·∫£ t·∫°o m·ªõi v√† ch·ªânh s·ª≠a) (Gi·ªØ nguy√™n)
    images.forEach(file => formData.append('images', file));
      // L·ª±a ch·ªçn endpoint v√† method
      const url = isEditMode ? `/reviews/${initialReview.reviewId}` : '/reviews';
      const method = isEditMode ? 'put' : 'post'; // API c·∫ßn h·ªó tr·ª£ PUT/PATCH cho ch·ªânh s·ª≠a

      const res = await api[method](url, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      // X√≥a d·ªØ li·ªáu form (ch·ªâ khi t·∫°o m·ªõi)
      if (!isEditMode) {
        setComment('');
        setRating(5);
        setImages([]);
        setPreviewUrls([]);
      }

      alert(`üéâ ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ${isEditMode ? 'c·∫≠p nh·∫≠t' : 'g·ª≠i'} th√†nh c√¥ng!`);
      onAdded && onAdded(res.data);
    } catch (err) {
      console.error('‚ùå L·ªói g·ª≠i/c·∫≠p nh·∫≠t review:', err.response || err);
      alert(err.response?.data?.error || `L·ªói ${isEditMode ? 'c·∫≠p nh·∫≠t' : 'g·ª≠i'} ƒë√°nh gi√°, vui l√≤ng th·ª≠ l·∫°i.`);
    } finally {
      setIsSubmitting(false);
    }
  }

  if (!isAuthenticated) {
    return (
      <div
        style={{
          marginTop: 8,
          padding: 15,
          border: '1px dashed orange',
          textAlign: 'center',
        }}
      >
        <p>
          ‚ö†Ô∏è B·∫°n c·∫ßn <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ g·ª≠i ƒë√°nh gi√° s·∫£n ph·∫©m n√†y.
        </p>
      </div>
    );
  }

  return (
    <div
      style={{
        marginTop: 8,
        padding: 15,
        border: '1px solid #ccc',
        borderRadius: 5,
        backgroundColor: isEditMode ? '#fff3cd' : '#fff', // M√†u n·ªÅn kh√°c khi ch·ªânh s·ª≠a
      }}
    >
      <h3>{isEditMode ? `Ch·ªânh s·ª≠a ƒë√°nh gi√° c·ªßa b·∫°n (ID: ${initialReview.reviewId})` : `Vi·∫øt ƒë√°nh gi√° c·ªßa b·∫°n`} (ƒêƒÉng nh·∫≠p l√†: {user?.name})</h3>

      {/* Rating */}
      <div>
        <label>ƒê√°nh gi√° sao: </label>
        <select
          value={rating}
          onChange={(e) => setRating(+e.target.value)}
          disabled={isSubmitting}
        >
          {[5, 4, 3, 2, 1].map((n) => (
            <option key={n} value={n}>
              {n} sao
            </option>
          ))}
        </select>
      </div>

      {/* Comment */}
      <div style={{ marginTop: 10 }}>
        <textarea
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          rows={4}
          cols={60}
          placeholder="Vi·∫øt nh·∫≠n x√©t chi ti·∫øt..."
          disabled={isSubmitting}
          style={{ width: '100%', boxSizing: 'border-box' }}
        />
      </div>

      {/* Upload ·∫£nh */}
      <div style={{ marginTop: 10 }}>
        <label>·∫¢nh minh h·ªça (t·ªëi ƒëa 5 ·∫£nh, **ch·ªâ ch·ªçn th√™m ·∫£nh m·ªõi**): </label>
        <input
          type="file"
          multiple
          accept="image/*"
          onChange={handleImageChange}
          disabled={isSubmitting}
          // Reset input file sau khi ch·ªçn
          key={images.length} 
        />
        {isEditMode && <p style={{fontSize: 12, color: '#666'}}>* ·∫¢nh c≈© s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i. N·∫øu mu·ªën x√≥a ·∫£nh c≈©, b·∫°n c·∫ßn thao t√°c tr√™n backend ho·∫∑c thi·∫øt k·∫ø th√™m giao di·ªán.</p>}
      </div>

      {/* Preview ·∫£nh (·∫¢nh c≈© + ·∫¢nh m·ªõi) */}
      {(existingImageUrls.length > 0 || previewUrls.length > 0) && (
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginTop: 10 }}>
            {/* ·∫¢nh c≈© */}
            {existingImageUrls.map((src, i) => (
                <div
                    key={`old-${i}`}
                    style={{
                        width: 80,
                        height: 80,
                        border: '1px solid #007bff', // D·ªÖ ph√¢n bi·ªát
                        borderRadius: 5,
                        overflow: 'hidden',
                        position: 'relative',
                    }}
                >
                    <img
                        src={src}
                        alt={`old-preview-${i}`}
                        style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                    />
                    <span style={{ position: 'absolute', top: 0, right: 0, background: 'rgba(0,123,255,0.7)', color: 'white', fontSize: 10, padding: '2px 4px', borderRadius: '0 0 0 5px' }}>C≈©</span>
                </div>
            ))}
            {/* ·∫¢nh m·ªõi */}
          {previewUrls.map((src, i) => (
            <div
              key={`new-${i}`}
              style={{
                width: 80,
                height: 80,
                border: '1px solid #ccc',
                borderRadius: 5,
                overflow: 'hidden',
                position: 'relative',
              }}
            >
              <img
                src={src}
                alt={`new-preview-${i}`}
                style={{ width: '100%', height: '100%', objectFit: 'cover' }}
              />
              <span style={{ position: 'absolute', top: 0, right: 0, background: 'rgba(220,53,69,0.7)', color: 'white', fontSize: 10, padding: '2px 4px', borderRadius: '0 0 0 5px' }}>M·ªõi</span>

            </div>
          ))}
        </div>
      )}

      {/* Submit */}
      <div style={{ marginTop: 12, display: 'flex', gap: 10 }}>
        <button
          onClick={submit}
          disabled={isSubmitting || !comment.trim()}
          style={{
            padding: '8px 15px',
            backgroundColor: isEditMode ? '#28a745' : '#007bff', // M√†u xanh l√° cho Edit
            color: 'white',
            border: 'none',
            borderRadius: 4,
            cursor: 'pointer',
          }}
        >
          {isSubmitting ? `ƒêang ${isEditMode ? 'c·∫≠p nh·∫≠t' : 'g·ª≠i'}...` : (isEditMode ? 'C·∫≠p Nh·∫≠t ƒê√°nh Gi√°' : 'G·ª≠i ƒê√°nh Gi√°')}
        </button>

        {/* N√∫t H·ªßy (ch·ªâ hi·ªán khi ƒëang ch·ªânh s·ª≠a) */}
        {isEditMode && (
            <button
                onClick={onCancelEdit}
                disabled={isSubmitting}
                style={{
                    padding: '8px 15px',
                    backgroundColor: '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: 4,
                    cursor: 'pointer',
                }}
            >
                H·ªßy
            </button>
        )}
      </div>
    </div>
  );
}